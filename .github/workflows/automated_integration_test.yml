name: Automated Integration Test

on:
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch name to build"
        required: true
        default: "main"

jobs:
  Automated_integration_test:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        api-level: [29]
        arch: [x86_64]
    env:
      STORE_PASS: test@cake_wallet
      KEY_PASS: test@cake_wallet
      PR_NUMBER: ${{ github.event.number }}

    steps:
      - name: is pr
        if: github.event_name == 'pull_request'
        run: echo "BRANCH_NAME=${GITHUB_HEAD_REF}" >> $GITHUB_ENV

      - name: is not pr
        if: github.event_name != 'pull_request'
        run: echo "BRANCH_NAME=${{ github.event.inputs.branch }}" >> $GITHUB_ENV

      - name: Free Disk Space (Ubuntu)
        uses: insightsengineering/disk-space-reclaimer@v1
        with:
          tools-cache: true
          android: false
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true
          docker-images: true

      - uses: actions/checkout@v2
      # - uses: actions/setup-java@v1
      #   with:
      #     java-version: "11.x"

      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: "11.x"

      - name: Flutter action
        uses: subosito/flutter-action@v1
        with:
          flutter-version: "3.19.6"
          channel: stable

      - name: Install package dependencies
        run: sudo apt-get install -y curl unzip automake build-essential file pkg-config git python libtool libtinfo5 cmake clang

      - name: Execute Build and Setup Commands
        run: |
          sudo mkdir -p /opt/android
          sudo chown $USER /opt/android
          cd /opt/android
          -y curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
          cargo install cargo-ndk
          git clone https://github.com/cake-tech/cake_wallet.git --branch ${{ env.BRANCH_NAME }}
          cd cake_wallet/scripts/android/
          ./install_ndk.sh
          source ./app_env.sh cakewallet
          chmod +x pubspec_gen.sh
          ./app_config.sh

      - name: Cache Externals
        id: cache-externals
        uses: actions/cache@v3
        with:
          path: |
            /opt/android/cake_wallet/cw_haven/android/.cxx
            /opt/android/cake_wallet/scripts/monero_c/release
          key: ${{ hashFiles('**/prepare_moneroc.sh' ,'**/build_monero_all.sh') }}

      - if: ${{ steps.cache-externals.outputs.cache-hit != 'true' }}
        name: Generate Externals
        run: |
          cd /opt/android/cake_wallet/scripts/android/
          source ./app_env.sh cakewallet
          ./build_monero_all.sh

      - name: Install Flutter dependencies
        run: |
          cd /opt/android/cake_wallet
          flutter pub get

      - name: Generate KeyStore
        run: |
          cd /opt/android/cake_wallet/android/app
          keytool -genkey -v -keystore key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias testKey -noprompt -dname "CN=CakeWallet, OU=CakeWallet, O=CakeWallet, L=Florida, S=America, C=USA" -storepass $STORE_PASS -keypass $KEY_PASS

      - name: Generate key properties
        run: |
          cd /opt/android/cake_wallet
          flutter packages pub run tool/generate_android_key_properties.dart keyAlias=testKey storeFile=key.jks storePassword=$STORE_PASS keyPassword=$KEY_PASS

      - name: Generate localization
        run: |
          cd /opt/android/cake_wallet
          flutter packages pub run tool/generate_localization.dart

      - name: Build generated code
        run: |
          cd /opt/android/cake_wallet
          ./model_generator.sh

      - name: Add secrets
        run: |
          cd /opt/android/cake_wallet
          touch lib/.secrets.g.dart
          touch cw_evm/lib/.secrets.g.dart
          touch cw_solana/lib/.secrets.g.dart
          touch cw_core/lib/.secrets.g.dart
          touch cw_nano/lib/.secrets.g.dart
          touch cw_tron/lib/.secrets.g.dart
          echo "const salt = '${{ secrets.SALT }}';" > lib/.secrets.g.dart
          echo "const keychainSalt = '${{ secrets.KEY_CHAIN_SALT }}';" >> lib/.secrets.g.dart
          echo "const key = '${{ secrets.KEY }}';" >> lib/.secrets.g.dart
          echo "const seeds = '${{ secrets.SEEDS }}';" >> lib/.secrets.g.dart
          echo "const walletSalt = '${{ secrets.WALLET_SALT }}';" >> lib/.secrets.g.dart
          echo "const shortKey = '${{ secrets.SHORT_KEY }}';" >> lib/.secrets.g.dart
          echo "const backupSalt = '${{ secrets.BACKUP_SALT }}';" >> lib/.secrets.g.dart
          echo "const backupKeychainSalt = '${{ secrets.BACKUP_KEY_CHAIN_SALT }}';" >> lib/.secrets.g.dart
          echo "const changeNowApiKey = '${{ secrets.CHANGE_NOW_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const changeNowApiKeyDesktop = '${{ secrets.CHANGE_NOW_API_KEY_DESKTOP }}';" >> lib/.secrets.g.dart
          echo "const wyreSecretKey = '${{ secrets.WYRE_SECRET_KEY }}';" >> lib/.secrets.g.dart
          echo "const wyreApiKey = '${{ secrets.WYRE_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const wyreAccountId = '${{ secrets.WYRE_ACCOUNT_ID }}';" >> lib/.secrets.g.dart
          echo "const moonPayApiKey = '${{ secrets.MOON_PAY_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const moonPaySecretKey = '${{ secrets.MOON_PAY_SECRET_KEY }}';" >> lib/.secrets.g.dart
          echo "const sideShiftAffiliateId = '${{ secrets.SIDE_SHIFT_AFFILIATE_ID }}';" >> lib/.secrets.g.dart
          echo "const simpleSwapApiKey = '${{ secrets.SIMPLE_SWAP_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const simpleSwapApiKeyDesktop = '${{ secrets.SIMPLE_SWAP_API_KEY_DESKTOP }}';" >> lib/.secrets.g.dart
          echo "const onramperApiKey = '${{ secrets.ONRAMPER_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const anypayToken = '${{ secrets.ANY_PAY_TOKEN }}';" >> lib/.secrets.g.dart
          echo "const ioniaClientId = '${{ secrets.IONIA_CLIENT_ID }}';" >> lib/.secrets.g.dart
          echo "const twitterBearerToken = '${{ secrets.TWITTER_BEARER_TOKEN }}';" >> lib/.secrets.g.dart
          echo "const trocadorApiKey = '${{ secrets.TROCADOR_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const trocadorExchangeMarkup = '${{ secrets.TROCADOR_EXCHANGE_MARKUP }}';" >> lib/.secrets.g.dart
          echo "const anonPayReferralCode = '${{ secrets.ANON_PAY_REFERRAL_CODE }}';" >> lib/.secrets.g.dart
          echo "const fiatApiKey = '${{ secrets.FIAT_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const payfuraApiKey = '${{ secrets.PAYFURA_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const ankrApiKey = '${{ secrets.ANKR_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const etherScanApiKey = '${{ secrets.ETHER_SCAN_API_KEY }}';" >> cw_evm/lib/.secrets.g.dart
          echo "const moralisApiKey = '${{ secrets.MORALIS_API_KEY }}';" >> cw_evm/lib/.secrets.g.dart
          echo "const chatwootWebsiteToken = '${{ secrets.CHATWOOT_WEBSITE_TOKEN }}';" >> lib/.secrets.g.dart
          echo "const exolixApiKey = '${{ secrets.EXOLIX_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const robinhoodApplicationId = '${{ secrets.ROBINHOOD_APPLICATION_ID }}';" >> lib/.secrets.g.dart
          echo "const exchangeHelperApiKey = '${{ secrets.ROBINHOOD_CID_CLIENT_SECRET }}';" >> lib/.secrets.g.dart
          echo "const walletConnectProjectId = '${{ secrets.WALLET_CONNECT_PROJECT_ID }}';" >> lib/.secrets.g.dart
          echo "const moralisApiKey = '${{ secrets.MORALIS_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const polygonScanApiKey = '${{ secrets.POLYGON_SCAN_API_KEY }}';" >> cw_evm/lib/.secrets.g.dart
          echo "const ankrApiKey = '${{ secrets.ANKR_API_KEY }}';" >> cw_solana/lib/.secrets.g.dart
          echo "const testCakePayApiKey = '${{ secrets.TEST_CAKE_PAY_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const cakePayApiKey = '${{ secrets.CAKE_PAY_API_KEY }}';" >> lib/.secrets.g.dart
          echo "const authorization = '${{ secrets.CAKE_PAY_AUTHORIZATION }}';" >> lib/.secrets.g.dart
          echo "const CSRFToken = '${{ secrets.CSRF_TOKEN }}';" >> lib/.secrets.g.dart
          echo "const quantexExchangeMarkup = '${{ secrets.QUANTEX_EXCHANGE_MARKUP }}';" >> lib/.secrets.g.dart
          echo "const nano2ApiKey = '${{ secrets.NANO2_API_KEY }}';" >> cw_nano/lib/.secrets.g.dart
          echo "const nanoNowNodesApiKey = '${{ secrets.NANO_NOW_NODES_API_KEY }}';" >> cw_nano/lib/.secrets.g.dart
          echo "const tronGridApiKey = '${{ secrets.TRON_GRID_API_KEY }}';" >> cw_tron/lib/.secrets.g.dart
          echo "const tronNowNodesApiKey = '${{ secrets.TRON_NOW_NODES_API_KEY }}';" >> cw_tron/lib/.secrets.g.dart

      - name: Rename app
        run: |
          echo -e "id=com.cakewallet.test_${{ env.PR_NUMBER }}\nname=${{ env.BRANCH_NAME }}" > /opt/android/cake_wallet/android/app.properties

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      # - name: ðŸ¦¾ Cache gradle
      #   uses: gradle/actions/setup-gradle@v3

      # - name: ðŸ¦¾ Cache AVD
      #   uses: actions/cache@v4
      #   id: avd-cache
      #   with:
      #     path: |
      #       ~/.android/avd/*
      #       ~/.android/adb*
      #     key: avd-${{ matrix.api-level }}

      # - name: ðŸ¦¾ Create AVD and generate snapshot for caching
      #   if: steps.avd-cache.outputs.cache-hit != 'true'
      #   uses: reactivecircus/android-emulator-runner@v2
      #   with:
      #     api-level: ${{ matrix.api-level }}
      #     force-avd-creation: false
      #     emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
      #     disable-animations: false
      #     script: echo "Generated AVD snapshot for caching."

      - name: ðŸš€ Integration tests on Android Emualator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          arch: ${{ matrix.arch }}
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: cd /opt/android/cake_wallet && flutter test integration_test
